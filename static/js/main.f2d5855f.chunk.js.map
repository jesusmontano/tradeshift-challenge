{"version":3,"sources":["util/helpers.js","App.js","serviceWorker.js","index.js"],"names":["isTriangle","side1","side2","side3","Number","determineType","sides","uniqueSides","Set","size","App","props","handleSubmit","bind","state","type","field","e","setState","target","value","preventDefault","this","side","className","icon","side1Feedback","checkValidLength","side2Feedback","side3Feedback","impossibleTriangleMessage","button","onClick","disabled","title","color","onSubmit","required","onChange","update","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2d5855f.chunk.js","sourcesContent":["export const isTriangle = function (side1, side2, side3) {\n    if (\n        Number(side1) >= Number(side2) + Number(side3) ||\n        Number(side2) >= Number(side1) + Number(side3) ||\n        Number(side3) >= Number(side1) + Number(side2) ||\n        Number(side1) <= 0 || !Number(side1) ||\n        Number(side2) <= 0 || !Number(side2) ||\n        Number(side3) <= 0 || !Number(side3)\n    ) return false;\n\n    return true;\n}\n\nexport const determineType = function (side1, side2, side3) {\n    let sides = [Number(side1), Number(side2), Number(side3)];\n\n    if (!isTriangle(...sides)) {\n        return 'Not Possible'\n    }\n\n    let uniqueSides = new Set(sides);\n\n    if (uniqueSides.size === 1) {\n        return 'Equilateral';\n    } else if (uniqueSides.size === 2) {\n        return 'Isosceles';\n    } else {\n        return 'Scalene';\n    }\n}\n\nexport const hasAllPositiveSides = function (side1, side2, side3) {\n    if (\n        Number(side1) <= 0 ||\n        Number(side2) <= 0 ||\n        Number(side3) <= 0 ||\n        !Number(side1) ||\n        !Number(side2) ||\n        !Number(side3)\n    ) return false;\n\n    return true;\n}\n","import React from 'react';\nimport './App.css';\nimport { hasAllPositiveSides, determineType } from './util/helpers';\nimport '@tradeshift/elements'\nimport '@tradeshift/elements.button'\nimport '@tradeshift/elements.header'\nimport '@tradeshift/elements/src/vars.css'\nimport '@tradeshift/elements.icon'\nimport '@tradeshift/elements.note'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.state = {\n      side1: '',\n      side2: '',\n      side3: '',\n      type: ''\n    }\n  }\n\n  update(field) {\n    return (e) => {\n      this.setState({ [field]: e.target.value })\n    };\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    return this.setState({ type: determineType(this.state.side1, this.state.side2, this.state.side3) });\n  }\n\n  checkValidLength(side) { // Returns appropriate error message.\n    if (side === '') { // In this case, the input field is empty.\n      return (\n        <div className=\"input-errors\">\n          <ts-icon type=\"info\" icon=\"info\" size=\"large\"></ts-icon>\n          <span>Please fill out the field above.</span>\n        </div>\n      )\n    }\n\n    side = Number(side); // Since the input field is not empty, it's converted to a number.\n\n    if (side > 0) { // In this case, the input is a number greater than zero which is a valid length.\n      return (\n        <div className=\"input-errors\">\n          <ts-icon type=\"success\" icon=\"checkmark\" size=\"large\"></ts-icon>\n          <span>Input is valid.</span>\n        </div>)\n    } else { // In this case, the input is either NaN or a number less than 0.\n      return (\n        <div className=\"input-errors\">\n          <ts-icon type=\"error\" icon=\"close-clear\" size=\"large\"></ts-icon>\n          <span>Must be a positive numeric character.</span>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    let side1Feedback = this.checkValidLength(this.state.side1);\n    let side2Feedback = this.checkValidLength(this.state.side2);\n    let side3Feedback = this.checkValidLength(this.state.side3);\n    let impossibleTriangleMessage = this.state.type === 'Not Possible' ?\n      <ts-note type=\"neutral\" icon=\"remove\">No one side can be greater than or equal to the sum of the two others.</ts-note> : '';\n    let button = hasAllPositiveSides(this.state.side1, this.state.side2, this.state.side3) ?\n      <ts-button onClick={this.handleSubmit} type=\"primary\">Submit</ts-button> : <ts-button disabled=\"true\" type=\"primary\">Submit</ts-button>\n\n\n    return (\n      <div className=\"main-div\">\n        <ts-header title=\"Tradeshift Triangle Challenge\" color=\"blue\"></ts-header>\n        <form onSubmit={this.handleSubmit}>\n          <br></br>\n          <div className=\"inputs-div\">\n            <div className=\"individual-input\">\n              <label>First Side</label>\n              <input type='text' required=\"required\" value={this.state.side1} onChange={this.update('side1')} placeholder=\"Enter a length.\" ></input>\n              {side1Feedback}\n            </div>\n            <br></br>\n            <div className=\"individual-input\">\n              <label>Second Side</label>\n              <input type='text' required=\"required\" value={this.state.side2} onChange={this.update('side2')} placeholder=\"Enter a length.\"></input>\n              {side2Feedback}\n            </div>\n            <br></br>\n            <div className=\"individual-input\">\n              <label>Third Side</label>\n              <input type='text' required=\"required\" value={this.state.side3} onChange={this.update('side3')} placeholder=\"Enter a length.\"></input>\n              {side3Feedback}\n            </div>\n          </div>\n          <br></br>\n          {button}\n          <br></br>\n        </form>\n        <div className=\"triangle-type-div\">\n          <h3>Triangle Type:</h3>\n          <h1>{this.state.type}</h1>\n          {impossibleTriangleMessage}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}